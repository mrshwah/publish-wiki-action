import*as s from'@actions/core';import*as d from'@actions/github';import*as e from'node:fs/promises';import*as i from'node:path';import {glob}from'glob';import {exec}from'@actions/exec';async function l(){try{let t=s.getInput("docs-folder",{required:!0}),o=s.getInput("github-token",{required:!0}),c=d.context,g=`https://x-access-token:${o}@github.com/${c.repo.owner}/${c.repo.repo}.wiki.git`;await r("git",["clone",g,"wiki-repo"]);let p=await glob(`${t}/**/*.md`),w=await glob(`${t}/**/*.{png,jpg,jpeg,gif,svg}`);for(let a of w){let m=i.relative(t,a),n=i.join("wiki-repo",m);await e.mkdir(i.dirname(n),{recursive:!0}),await e.copyFile(a,n);}for(let a of p){let m=i.relative(t,a),n=i.join("wiki-repo",m),u=await e.readFile(a,"utf8");u=k(u,i.dirname(m)),await e.mkdir(i.dirname(n),{recursive:!0}),await e.writeFile(n,u);}await r("git",["-C","wiki-repo","add","."]),await r("git",["-C","wiki-repo","config","user.name","GitHub Action"]),await r("git",["-C","wiki-repo","config","user.email","action@github.com"]),await r("git",["-C","wiki-repo","commit","-m","Update wiki content"]),await r("git",["-C","wiki-repo","push"]);}catch(t){t instanceof Error&&s.setFailed(t.message);}}function k(t,o){return t.replace(/!\[(.*?)\]\((.*?)\)/g,(c,g,p)=>{if(p.startsWith("http"))return c;let w=i.join(o,p);return `![${g}](${w})`})}async function r(t,o){await exec(t,o);}l();
export{k as updateImageLinks};//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map
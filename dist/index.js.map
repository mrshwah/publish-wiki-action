{"version":3,"sources":["../src/index.ts"],"names":["run","docsFolder","token","context","wikiUrl","exec","markdownFiles","glob","imageFiles","imagePath","relativePath","destPath","mdFile","content","updateImageLinks","error","match","alt","newPath","command","args","execCallback"],"mappings":"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","file":"index.js","sourcesContent":["import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\nimport * as fs from \"node:fs/promises\";\nimport * as path from \"node:path\";\nimport { glob } from \"glob\";\nimport { exec as execCallback } from \"@actions/exec\";\n\nasync function run(): Promise<void> {\n  try {\n    const docsFolder = core.getInput(\"docs-folder\", { required: true });\n    const token = core.getInput(\"github-token\", { required: true });\n    const context = github.context;\n\n    // Clone the wiki repository\n    const wikiUrl = `https://x-access-token:${token}@github.com/${context.repo.owner}/${context.repo.repo}.wiki.git`;\n    await exec(\"git\", [\"clone\", wikiUrl, \"wiki-repo\"]);\n\n    // Get all markdown and image files\n    const markdownFiles = await glob(`${docsFolder}/**/*.md`);\n    const imageFiles = await glob(`${docsFolder}/**/*.{png,jpg,jpeg,gif,svg}`);\n\n    // Copy images to wiki repository\n    for (const imagePath of imageFiles) {\n      const relativePath = path.relative(docsFolder, imagePath);\n      const destPath = path.join(\"wiki-repo\", relativePath);\n\n      await fs.mkdir(path.dirname(destPath), { recursive: true });\n      await fs.copyFile(imagePath, destPath);\n    }\n\n    // Process and copy markdown files\n    for (const mdFile of markdownFiles) {\n      const relativePath = path.relative(docsFolder, mdFile);\n      const destPath = path.join(\"wiki-repo\", relativePath);\n\n      let content = await fs.readFile(mdFile, \"utf8\");\n\n      // Update image links to use wiki format\n      content = updateImageLinks(content, path.dirname(relativePath));\n\n      await fs.mkdir(path.dirname(destPath), { recursive: true });\n      await fs.writeFile(destPath, content);\n    }\n\n    // Commit and push changes\n    await exec(\"git\", [\"-C\", \"wiki-repo\", \"add\", \".\"]);\n    await exec(\"git\", [\n      \"-C\",\n      \"wiki-repo\",\n      \"config\",\n      \"user.name\",\n      \"GitHub Action\",\n    ]);\n    await exec(\"git\", [\n      \"-C\",\n      \"wiki-repo\",\n      \"config\",\n      \"user.email\",\n      \"action@github.com\",\n    ]);\n    await exec(\"git\", [\n      \"-C\",\n      \"wiki-repo\",\n      \"commit\",\n      \"-m\",\n      \"Update wiki content\",\n    ]);\n    await exec(\"git\", [\"-C\", \"wiki-repo\", \"push\"]);\n  } catch (error) {\n    if (error instanceof Error) {\n      core.setFailed(error.message);\n    }\n  }\n}\n\nfunction updateImageLinks(content: string, relativePath: string): string {\n  // Update image markdown links to use correct wiki paths\n  return content.replace(/!\\[(.*?)\\]\\((.*?)\\)/g, (match, alt, imagePath) => {\n    if (imagePath.startsWith(\"http\")) {\n      return match; // Don't modify external URLs\n    }\n\n    const newPath = path.join(relativePath, imagePath);\n    return `![${alt}](${newPath})`;\n  });\n}\n\nasync function exec(command: string, args: string[]): Promise<void> {\n  await execCallback(command, args);\n}\n\nrun();\n\nexport { updateImageLinks };\n"]}